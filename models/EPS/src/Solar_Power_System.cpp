/*
PURPOSE:    Simulate the power generated by a solar array by following the IV curve.

NOTE:       This implementation uses the Shockley diode equation to model the current output of a solar panel.

TERMS USED:
    -> V_mp - voltage at maximum power point
    -> I_mp - current at maximum power point
    -> V_oc - open-circuit voltage
    -> Vt - thermal voltage
    -> I_sc_max - maximum short-circuit current
    -> I_o - reverse saturation current
    -> Rs - series resistance of the solar cell
    -> Rsh - shunt resistance of the solar cell
    -> I_sc - short-circuit current
    -> I - current output of the solar array
    -> I2 - secondary current output for a different calculation

EQUATIONS TO MODEL:
    -> Rs = (V_oc - V_mp) / (16 * I_mp)
    -> Rsh = (5 * V_mp) / (I_sc - I_mp)
*/

#include "../include/Solar_Power_System.hh"
//#include "Ridged_body/include/Solar_Panel_body.hh" to get the I_L

#include <stdlib.h>
#include <math.h>
#include <cmath>
#include <iostream>

using namespace std;

double captureI = 0;

solar_array::solar_array()
    //Description:    Default constructor initializing solar array parameters to default values.
    //Preconditions:  None
    //Postconditions: Parameters set to default values; solar array is ready for simulation.
{
    V_mp = 37.23;
    I_mp = 8.06;
    V_oc = 40.71;
    Vt = 0.2586;
    I_sc_max = 8.947;
    I_o = 1e-10;

    Rs = (V_oc - V_mp) / (16 * I_mp);
    Rsh = (5 * V_mp) / (I_sc - I_mp);
    I_sc = 8.947;
    I = I_sc;
    n = 2;
    V = 0;
    t = 0;
}

solar_array::solar_array(double oc_voltage, double sc_current, double max_voltage, double max_current, double terminal_voltage)
    //Description:    Constructor initializing solar array parameters based on provided values.
    //Preconditions:  Parameters must be greater than zero.
    //Postconditions: Solar array parameters are set based on input values; ready for simulation.
{
    V_mp = max_voltage;
    I_mp = max_current;
    V_oc = oc_voltage;
    I_sc_max = sc_current;
    Vt = terminal_voltage;

    Rs = (V_oc - V_mp) / (16 * I_mp);
    Rsh = (5 * V_mp) / (I_sc - I_mp);
    I_sc = sc_current;
    I = I_sc;
    n = 2;
    V = 0;
    t = 0;
}

void solar_array::initialize(double oc_voltage, double sc_current, double max_voltage, double max_current, double terminal_voltage)
    //Description:    Initializes the solar array parameters with new values.
    //Preconditions:  Parameters must be greater than zero.
    //Postconditions: Solar array parameters are updated; ready for simulation.
{
    V_mp = max_voltage;
    I_mp = max_current;
    V_oc = oc_voltage;
    I_sc_max = sc_current;
    Vt = terminal_voltage;

    Rs = (V_oc - V_mp) / (16 * I_mp);
    Rsh = (5 * V_mp) / (I_sc - I_mp);
    I_sc = sc_current;
    I = I_sc;
    I2 = I_sc; // Initialize I2 for secondary current output
    n = 2;
    V = 0;
    t = 0;
}

void solar_array::update_I()
    //Description:    Updates the current output of the solar array based on the current voltage and IV curve modeling.
    //                The returned value is intended to be used in an integration function for power calculation.
    //Preconditions:  The voltage (V) must be set before calling this function.
    //Postconditions: Current (I) is updated based on the IV curve; I cannot be negative.
{
    double e = 2.7183;
    int count = 1;
    double I_prev;

    do {
        I_prev = I;
        I = I_sc - pow(e, ((V - V_mp) + (I - I_sc) * Rs) / (n * Vt)) + ((V + I * Rs) / Rsh);
        count++;
    } while (abs(I - I_prev) < 0.001 && count < 5);

    if (I < 0) {
        I = 0; // Ensure current is not negative
    }

    if (I2 < 0) {
        I2 = 0; // Ensure secondary current is not negative
    }
}

/*dI = -((1/Vt)*(I_sc - V_oc/Rsh)*pow(e, (V+I*Rs-V_oc)/Vt)-(1/Rsh))/(1+(Rs/Vt)*(I_sc - V_oc/Rsh)*pow(e, (V+I*Rs-V_oc)/Vt)+(Rs/Rsh));*/

void solar_array::update_V(double voltage)
    //Description:    Sets the current voltage for the solar array to simulate the IV curve.
    //Preconditions:  The voltage provided must be valid.
    //Postconditions: The voltage (V) parameter is updated for the next calculation.
{
    V = voltage;
}

double solar_array::get_I()
    //Description:    Returns the current output of the solar array.
    //Preconditions:  Current (I) must be calculated.
    //Postconditions: The current output is returned to the user.
{
    return I;
}

void solar_array::set_I_sc(double sc_current)
{
    I_sc = sc_current;
}

double solar_array::get_I2()
    //Description:    Returns the secondary current output of the solar array.
    //Preconditions:  Secondary current (I2) must be calculated.
    //Postconditions: The secondary current output is returned to the user.
{
    return I2;
}
